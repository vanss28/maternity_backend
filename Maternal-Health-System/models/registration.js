import mongoose from "mongoose";

const RegistrationSchema = new mongoose.Schema({
  personal: {
    name: { type: String, required: true },
    age: { type: Number, required: true },
    husbandName: String,
    religion: String,
    caste: String,
    socialCategory: { type: String, enum: ["SC", "ST", "OBC", "General"] },
    address: String,
    contact: String,
    aadhaarNumber: String,
    abhaNumber: String,
    bankAccount: String,
    education: String,
    husbandEducation: String,
    occupation: String,
    husbandOccupation: String,
    socioeconomicStatus: { type: String, enum: ["BPL", "APL"] },
    fatherAge: Number,
    parentalConsanguinity: String,
    fcmToken: String,
    emergencyNumber: Number,
  },
  obstetricHistory: {
    gravida: Number,
    para: Number,
    liveChildren: Number,
    abortions: Number,
    stillbirths: Number,
    ectopicPregnancy: Boolean,
    previousCesarean: Boolean,
    complications: String,
    interPregnancyInterval: String,
    previousFetalAnomaly: String,
    previousPregnancyTerminationReason: String,
  },
  menstrualHistory: {
    ageAtMenarche: Number,
    cycleRegularity: String,
    lmp: Date, // Last Menstrual Period
    edd: Date, // Estimated Due Date
    disorders: String,
  },
  medicalHistory: {
    hypertension: Boolean,
    diabetes: Boolean,
    asthma: Boolean,
    epilepsy: Boolean,
    thyroid: Boolean,
    tuberculosis: Boolean,
    heartDisease: Boolean,
    hiv: Boolean,
    hepatitis: Boolean,
    anemia: Boolean,
    otherChronicIllness: String,
    previousTransfusions: Boolean,
    pastHospitalizations: String,
    highRiskMedications: String,
    uncontrolledDiabetesOrObesity: Boolean,
    vitaminDeficiencies: String,
  },
  familyHistory: {
    geneticDisorders: String,
    twinPregnancies: Boolean,
    familyDiabetes: Boolean,
    familyHypertension: Boolean,
    familyCardiacDisease: Boolean,
    familyMentalIllness: Boolean,
    consanguineousMarriage: Boolean,
    repeatedMiscarriages: Boolean,
    inheritedConditions: String,
    familyCleftOrDefect: String,
  },
  obstetricRiskFactors: {
    pretermLabor: Boolean,
    iugr: Boolean,
    eclampsia: Boolean,
    hemorrhage: Boolean,
    prolongedLabor: Boolean,
    lowBirthWeight: Boolean,
    neonatalDeath: Boolean,
    congenitalAnomalies: Boolean,
    rhIncompatibility: Boolean,
    priorPrenatalTests: String,
    priorBabyDisorder: String,
  },
  immunizationHistory: {
    ttStatus: String,
    ifaIntake: Boolean,
    deworming: Boolean,
    covidVaccine: Boolean,
    otherVaccines: String,
    rubellaCMVScreening: String,
  },
  dietAndNutrition: {
    vegetarian: Boolean,
    mealsPerDay: Number,
    fruitsAndVegetables: Boolean,
    ironCalciumFoods: Boolean,
    teaCoffee: Boolean,
    tobaccoAlcohol: Boolean,
    preconceptionFolicAcid: Boolean,
    awarenessOfTeratogens: Boolean,
  },
  lifestyle: {
    tobaccoUse: Boolean,
    alcoholUse: Boolean,
    narcotics: Boolean,
    physicalActivity: String,
    domesticViolence: Boolean,
    occupationalExposure: String,
  },
  environment: {
    housingType: String,
    toiletFacility: String,
    drinkingWaterSource: String,
    cookingFuel: String,
    mosquitoBreeding: Boolean,
    proximityToWaste: Boolean,
    borewellOrContaminatedWater: Boolean,
  },
  contraceptiveHistory: {
    previousUse: Boolean,
    failureOrComplications: String,
    intentionToUsePostDelivery: Boolean,
    emergencyContraception: Boolean,
  },
  other: {
    bloodGroup: String,
    rhType: String,
    drugOrFoodAllergies: String,
    maritalAge: Number,
    institutionalDeliveryIntent: Boolean,
    awarenessOfSchemes: Boolean,
  },
  abhaId: String,
  jsyEligibility: {
    bplStatus: Boolean,
    caste: String,
    parity: Number,
    eligible: Boolean,
  },
  optionalInvestigations: {
    hemoglobin: Number,
    urineRoutine: String,
    bloodGroup: String,
    rhTyping: String,
    rbs: Number,
  },
  pregnancyId: { type: String, unique: true, required: true },
  qrCode: String,
  registrationLog: {
    timestamp: { type: Date, default: Date.now },
    enteredBy: String,
    gps: {
      lat: Number,
      lng: Number,
    },
  },
  reports: [{ type: mongoose.Schema.Types.ObjectId, ref: "Report" }],
});

const RegistrationModel = mongoose.model("Registration", RegistrationSchema);
export default RegistrationModel;
